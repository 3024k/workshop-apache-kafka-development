/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.sysco.middleware.workshop.kafka.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Some Record */
@org.apache.avro.specific.AvroGenerated
public class Record1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1580194834042522416L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Record1\",\"namespace\":\"no.sysco.middleware.workshop.kafka.avro\",\"doc\":\"Some Record\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"record_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"RECORD_TYPE_1\"},{\"name\":\"optional_element\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public java.lang.String record_type;
  @Deprecated public java.lang.String optional_element;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Record1() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param record_type The new value for record_type
   * @param optional_element The new value for optional_element
   */
  public Record1(java.lang.Long id, java.lang.String record_type, java.lang.String optional_element) {
    this.id = id;
    this.record_type = record_type;
    this.optional_element = optional_element;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return record_type;
    case 2: return optional_element;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: record_type = (java.lang.String)value$; break;
    case 2: optional_element = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'record_type' field.
   * @return The value of the 'record_type' field.
   */
  public java.lang.String getRecordType() {
    return record_type;
  }

  /**
   * Sets the value of the 'record_type' field.
   * @param value the value to set.
   */
  public void setRecordType(java.lang.String value) {
    this.record_type = value;
  }

  /**
   * Gets the value of the 'optional_element' field.
   * @return The value of the 'optional_element' field.
   */
  public java.lang.String getOptionalElement() {
    return optional_element;
  }

  /**
   * Sets the value of the 'optional_element' field.
   * @param value the value to set.
   */
  public void setOptionalElement(java.lang.String value) {
    this.optional_element = value;
  }

  /**
   * Creates a new Record1 RecordBuilder.
   * @return A new Record1 RecordBuilder
   */
  public static no.sysco.middleware.workshop.kafka.avro.Record1.Builder newBuilder() {
    return new no.sysco.middleware.workshop.kafka.avro.Record1.Builder();
  }

  /**
   * Creates a new Record1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Record1 RecordBuilder
   */
  public static no.sysco.middleware.workshop.kafka.avro.Record1.Builder newBuilder(no.sysco.middleware.workshop.kafka.avro.Record1.Builder other) {
    return new no.sysco.middleware.workshop.kafka.avro.Record1.Builder(other);
  }

  /**
   * Creates a new Record1 RecordBuilder by copying an existing Record1 instance.
   * @param other The existing instance to copy.
   * @return A new Record1 RecordBuilder
   */
  public static no.sysco.middleware.workshop.kafka.avro.Record1.Builder newBuilder(no.sysco.middleware.workshop.kafka.avro.Record1 other) {
    return new no.sysco.middleware.workshop.kafka.avro.Record1.Builder(other);
  }

  /**
   * RecordBuilder for Record1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Record1>
    implements org.apache.avro.data.RecordBuilder<Record1> {

    private long id;
    private java.lang.String record_type;
    private java.lang.String optional_element;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.sysco.middleware.workshop.kafka.avro.Record1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.record_type)) {
        this.record_type = data().deepCopy(fields()[1].schema(), other.record_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.optional_element)) {
        this.optional_element = data().deepCopy(fields()[2].schema(), other.optional_element);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Record1 instance
     * @param other The existing instance to copy.
     */
    private Builder(no.sysco.middleware.workshop.kafka.avro.Record1 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.record_type)) {
        this.record_type = data().deepCopy(fields()[1].schema(), other.record_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.optional_element)) {
        this.optional_element = data().deepCopy(fields()[2].schema(), other.optional_element);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'record_type' field.
      * @return The value.
      */
    public java.lang.String getRecordType() {
      return record_type;
    }

    /**
      * Sets the value of the 'record_type' field.
      * @param value The value of 'record_type'.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder setRecordType(java.lang.String value) {
      validate(fields()[1], value);
      this.record_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'record_type' field has been set.
      * @return True if the 'record_type' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'record_type' field.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder clearRecordType() {
      record_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'optional_element' field.
      * @return The value.
      */
    public java.lang.String getOptionalElement() {
      return optional_element;
    }

    /**
      * Sets the value of the 'optional_element' field.
      * @param value The value of 'optional_element'.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder setOptionalElement(java.lang.String value) {
      validate(fields()[2], value);
      this.optional_element = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'optional_element' field has been set.
      * @return True if the 'optional_element' field has been set, false otherwise.
      */
    public boolean hasOptionalElement() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'optional_element' field.
      * @return This builder.
      */
    public no.sysco.middleware.workshop.kafka.avro.Record1.Builder clearOptionalElement() {
      optional_element = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Record1 build() {
      try {
        Record1 record = new Record1();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.record_type = fieldSetFlags()[1] ? this.record_type : (java.lang.String) defaultValue(fields()[1]);
        record.optional_element = fieldSetFlags()[2] ? this.optional_element : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
